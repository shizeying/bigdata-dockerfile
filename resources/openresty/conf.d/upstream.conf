	# 动态上游集群
	upstream binghe_server{
		server 0.0.0.1; # 占位用，无实际意义

		# 执行负载均衡的 Lua 代码
		balancer_by_lua_block{
			local checkups = require "resty.checkups.api"
			local balancer = require "ngx.balancer";
			balancer.set_timeouts(1, 0.5, 0.5) -- 后端的连接和读写超时时间
			balancer.set_more_tries(2) 		   -- 连接失败后最多在重试 2 次

			local status, code = balancer.get_last_failure()  -- 获取上次失败信息
			if status == "failed" then
				local last_peer = ngx.ctx.last_peer
				ngx.log(ngx.ERR, "get_last_failure:", last_peer);
				-- 标记上次失败 server
				checkups.feedback_status("up_http", last_peer.host, last_peer.port, true)
			end
			local peer,err = checkups.select_peer("up_http") -- 根据算法从服务器列表中获取一个服务地址
			ngx.ctx.last_peer = peer	-- 记录这次连接 server
			balancer.set_current_peer(peer.host, peer.port)
		}
		keepalive 10;  # 需在 balancer 指令之后
	}